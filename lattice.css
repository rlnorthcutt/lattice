/*!
 * Lattice.css — lightweight layout & positioning utilities
 * Version: 1.0.0
 * Copyright (c) 2025 Ron Northcutt
 * License: MIT (https://opensource.org/licenses/MIT)
 *
 * Purpose:
 * - Tiny, semantic utilities for *layout, positioning, and minor adjustments*.
 * - Pairs with a classless theme for typography/forms/colors.
 * - Grid-first, responsive, and accessible.
 */

/* ==========================================================================
   0) Root variables (tweak to taste)
   ========================================================================== */

:root {
  /* Container & rhythm */
  --container-width: 1024px;

  /* Rhythm scale base (used by spacing utilities) */
  --m: 1.5rem;               /* base spacing unit */
  --g: 1rem;                 /* horizontal gutter (grid column-gap) */
  --gap-y: 1rem;             /* vertical gutter (grid row-gap) */
  --c: 1fr;                  /* default column track */

  /* Default minimum card width for fluid grids (auto-fit) */
  --auto-col-min: 15rem;

  /* 12-column master grid:
     pattern is [c] + repeat(--column-count, [g][c])
     => total content columns = 1 + --column-count = 12
  */
  --column-count: 11;

  /* Prevent negative fluid on narrow viewports for full-bleed wrapper */
  --fluid-area: max(0px, calc(50vw - var(--container-width) / 2));
}

/* ==========================================================================
   1) Master grid container (page-level layout)
   - Provides a 12-column content grid with outer fluid gutters + safe-area
   - Use .l-place-* or .col-span-* on direct children to position
   ========================================================================== */

.grid-container {
  display: grid;
  grid-template-columns:
    [fa] var(--fluid-area)
    [m] max(var(--m), env(safe-area-inset-left))
    /* [c] content, [g] gutter — numbered via 'c 1', 'c 2', ... , 'c 12' */
    [c] var(--c) repeat(var(--column-count), [g] var(--g) [c] var(--c))
    [m] max(var(--m), env(safe-area-inset-right))
    [fa] var(--fluid-area);
}

/* Placement helpers for common page-width patterns */
.l-place-full    { grid-column: fa 1 / fa 2; } /* full-bleed across viewport */
.l-place-content { grid-column: m 1 / m 2; }   /* centered, within margins  */

/* ==========================================================================
   2) Internal grid primitives (component-level)
   - .grid is your go-to container for cards, lists, etc.
   - Default is *fluid* using auto-fit; override with col-* utilities.
   ========================================================================== */

.grid {
  display: grid;
  row-gap: var(--gap-y);
  column-gap: var(--g);
  /* Fluid by default: creates as many columns as fit the min size */
  grid-template-columns: repeat(auto-fit, minmax(var(--auto-col-min), 1fr));
}

/* Inherit the columns from a parent grid (modern browsers) */
.subgrid {
  display: grid;
  grid-template-columns: subgrid;
}

/* ==========================================================================
   3) Column-count utilities (override the default fluid columns)
   - Apply to .grid to force an exact number of equal columns.
   - Base (always-on) variants + responsive sm-/md-/lg- variants.
   ========================================================================== */

/* Base */
.grid.col-1  { grid-template-columns: repeat(1, 1fr); }
.grid.col-2  { grid-template-columns: repeat(2, 1fr); }
.grid.col-3  { grid-template-columns: repeat(3, 1fr); }
.grid.col-4  { grid-template-columns: repeat(4, 1fr); }
.grid.col-6  { grid-template-columns: repeat(6, 1fr); }
.grid.col-12 { grid-template-columns: repeat(12, 1fr); }

/* ≥576px (small) */
@media (min-width: 576px) {
  .sm-col-1  { grid-template-columns: repeat(1, 1fr); }
  .sm-col-2  { grid-template-columns: repeat(2, 1fr); }
  .sm-col-3  { grid-template-columns: repeat(3, 1fr); }
  .sm-col-4  { grid-template-columns: repeat(4, 1fr); }
  .sm-col-6  { grid-template-columns: repeat(6, 1fr); }
  .sm-col-12 { grid-template-columns: repeat(12, 1fr); }
}

/* ≥768px (medium) */
@media (min-width: 768px) {
  .md-col-1  { grid-template-columns: repeat(1, 1fr); }
  .md-col-2  { grid-template-columns: repeat(2, 1fr); }
  .md-col-3  { grid-template-columns: repeat(3, 1fr); }
  .md-col-4  { grid-template-columns: repeat(4, 1fr); }
  .md-col-6  { grid-template-columns: repeat(6, 1fr); }
  .md-col-12 { grid-template-columns: repeat(12, 1fr); }
}

/* ≥1024px (large) */
@media (min-width: 1024px) {
  .lg-col-1  { grid-template-columns: repeat(1, 1fr); }
  .lg-col-2  { grid-template-columns: repeat(2, 1fr); }
  .lg-col-3  { grid-template-columns: repeat(3, 1fr); }
  .lg-col-4  { grid-template-columns: repeat(4, 1fr); }
  .lg-col-6  { grid-template-columns: repeat(6, 1fr); }
  .lg-col-12 { grid-template-columns: repeat(12, 1fr); }
}

/* ==========================================================================
   4) Display & visibility utilities (hyphen naming)
   - Consistent with breakpoint naming: .d-* and .sm-d-*/.md-d-*/.lg-d-*
   - Also normalizes [hidden] and .hidden to .d-none behavior.
   ========================================================================== */

/* Base display */
.d-none  { display: none !important; }
.d-block { display: block !important; }
.d-grid  { display: grid !important; }
.d-flex  { display: flex !important; }

/* Attribute & alias normalization */
.hidden,
[hidden] { display: none !important; }

/* Responsive display */
@media (min-width: 576px) {
  .sm-d-none  { display: none !important; }
  .sm-d-block { display: block !important; }
  .sm-d-grid  { display: grid !important; }
  .sm-d-flex  { display: flex !important; }
}
@media (min-width: 768px) {
  .md-d-none  { display: none !important; }
  .md-d-block { display: block !important; }
  .md-d-grid  { display: grid !important; }
  .md-d-flex  { display: flex !important; }
}
@media (min-width: 1024px) {
  .lg-d-none  { display: none !important; }
  .lg-d-block { display: block !important; }
  .lg-d-grid  { display: grid !important; }
  .lg-d-flex  { display: flex !important; }
}

/* ==========================================================================
   5) Accessibility helpers
   - Visually hide content while keeping it available to assistive tech.
   - Focusable variants reveal when navigated via keyboard.
   ========================================================================== */

.sr-only,
.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;

  /* modern + legacy clipping for broader coverage */
  clip-path: inset(50%) !important;
  clip: rect(1px, 1px, 1px, 1px) !important;

  white-space: nowrap !important;
  border: 0 !important;
}

/* Focusable variant: use on the same element in addition to sr-only */
.sr-only-focusable:active,
.sr-only-focusable:focus,
.sr-only-focusable:focus-within,
.visually-hidden-focusable:active,
.visually-hidden-focusable:focus,
.visually-hidden-focusable:focus-within {
  position: static !important;
  width: auto !important;
  height: auto !important;
  padding: 0 !important;
  margin: 0 !important;
  overflow: visible !important;
  clip-path: none !important;
  clip: auto !important;
  white-space: inherit !important;
  border: 0 !important;
}

/* Hide visually but keep layout space reserved */
.invisible { visibility: hidden !important; }

/* ==========================================================================
   6) Width helpers (purely sizing; not placement)
   ========================================================================== */

.w-100     { width: 100% !important; box-sizing: border-box; }
.max-w-100 { max-width: 100% !important; box-sizing: border-box; }

/* ==========================================================================
   7) Spacing utilities (padding & margin)
   - Scale: 0, 1 (¼m), 2 (½m), 3 (1×m), 4 (1.5×m), 5 (2×m)
   - Includes axis and side variants, plus auto-centering.
   ========================================================================== */

/* Padding */
.p-0 { padding: 0 !important; }
.p-1 { padding: calc(var(--m) / 4) !important; }
.p-2 { padding: calc(var(--m) / 2) !important; }
.p-3 { padding: var(--m) !important; }
.p-4 { padding: calc(var(--m) * 1.5) !important; }
.p-5 { padding: calc(var(--m) * 2) !important; }

/* Margin */
.m-0 { margin: 0 !important; }
.m-1 { margin: calc(var(--m) / 4) !important; }
.m-2 { margin: calc(var(--m) / 2) !important; }
.m-3 { margin: var(--m) !important; }
.m-4 { margin: calc(var(--m) * 1.5) !important; }
.m-5 { margin: calc(var(--m) * 2) !important; }

/* Axis */
.mx-0 { margin-left: 0 !important; margin-right: 0 !important; }
.mx-1 { margin-left: calc(var(--m) / 4) !important; margin-right: calc(var(--m) / 4) !important; }
.mx-2 { margin-left: calc(var(--m) / 2) !important; margin-right: calc(var(--m) / 2) !important; }
.mx-3 { margin-left: var(--m) !important; margin-right: var(--m) !important; }
.mx-4 { margin-left: calc(var(--m) * 1.5) !important; margin-right: calc(var(--m) * 1.5) !important; }
.mx-5 { margin-left: calc(var(--m) * 2) !important; margin-right: calc(var(--m) * 2) !important; }

.my-0 { margin-top: 0 !important; margin-bottom: 0 !important; }
.my-1 { margin-top: calc(var(--m) / 4) !important; margin-bottom: calc(var(--m) / 4) !important; }
.my-2 { margin-top: calc(var(--m) / 2) !important; margin-bottom: calc(var(--m) / 2) !important; }
.my-3 { margin-top: var(--m) !important; margin-bottom: var(--m) !important; }
.my-4 { margin-top: calc(var(--m) * 1.5) !important; margin-bottom: calc(var(--m) * 1.5) !important; }
.my-5 { margin-top: calc(var(--m) * 2) !important; margin-bottom: calc(var(--m) * 2) !important; }

/* Sides */
.mt-0 { margin-top: 0 !important; }
.mt-1 { margin-top: calc(var(--m) / 4) !important; }
.mt-2 { margin-top: calc(var(--m) / 2) !important; }
.mt-3 { margin-top: var(--m) !important; }
.mt-4 { margin-top: calc(var(--m) * 1.5) !important; }
.mt-5 { margin-top: calc(var(--m) * 2) !important; }

.mr-0 { margin-right: 0 !important; }
.mr-1 { margin-right: calc(var(--m) / 4) !important; }
.mr-2 { margin-right: calc(var(--m) / 2) !important; }
.mr-3 { margin-right: var(--m) !important; }
.mr-4 { margin-right: calc(var(--m) * 1.5) !important; }
.mr-5 { margin-right: calc(var(--m) * 2) !important; }

.mb-0 { margin-bottom: 0 !important; }
.mb-1 { margin-bottom: calc(var(--m) / 4) !important; }
.mb-2 { margin-bottom: calc(var(--m) / 2) !important; }
.mb-3 { margin-bottom: var(--m) !important; }
.mb-4 { margin-bottom: calc(var(--m) * 1.5) !important; }
.mb-5 { margin-bottom: calc(var(--m) * 2) !important; }

.ml-0 { margin-left: 0 !important; }
.ml-1 { margin-left: calc(var(--m) / 4) !important; }
.ml-2 { margin-left: calc(var(--m) / 2) !important; }
.ml-3 { margin-left: var(--m) !important; }
.ml-4 { margin-left: calc(var(--m) * 1.5) !important; }
.ml-5 { margin-left: calc(var(--m) * 2) !important; }

/* Centering helpers */
.m-auto  { margin: auto !important; }
.mx-auto { margin-left: auto !important; margin-right: auto !important; }

/* ==========================================================================
   8) Alignment & gap helpers (for .grid containers)
   ========================================================================== */

.gap-none { row-gap: 0; column-gap: 0; }
.gap-y-lg { row-gap: var(--m); }

.items-start   { align-items: start; }
.items-center  { align-items: center; }
.items-end     { align-items: end; }
.items-stretch { align-items: stretch; }

.justify-start   { justify-items: start; }
.justify-center  { justify-items: center; }
.justify-end     { justify-items: end; }
.justify-stretch { justify-items: stretch; }

/* ==========================================================================
   9) Master column spans (for children of .grid-container)
   - Use these to span N of the 12 master content columns.
   ========================================================================== */

.col-span-1  { grid-column: c 1 / c 2; }
.col-span-2  { grid-column: c 1 / c 3; }
.col-span-3  { grid-column: c 1 / c 4; }
.col-span-4  { grid-column: c 1 / c 5; }
.col-span-5  { grid-column: c 1 / c 6; }
.col-span-6  { grid-column: c 1 / c 7; }
.col-span-7  { grid-column: c 1 / c 8; }
.col-span-8  { grid-column: c 1 / c 9; }
.col-span-9  { grid-column: c 1 / c 10; }
.col-span-10 { grid-column: c 1 / c 11; }
.col-span-11 { grid-column: c 1 / c 12; }
.col-span-12 { grid-column: c 1 / c 13; } /* full 12 columns */

/* ==========================================================================
   10) Row utilities (for any grid item)
   ========================================================================== */

.row-span-1  { grid-row: span 1; }
.row-span-2  { grid-row: span 2; }
.row-span-3  { grid-row: span 3; }
.row-span-4  { grid-row: span 4; }
.row-span-5  { grid-row: span 5; }
.row-span-6  { grid-row: span 6; }
.row-span-7  { grid-row: span 7; }
.row-span-8  { grid-row: span 8; }
.row-span-9  { grid-row: span 9; }
.row-span-10 { grid-row: span 10; }
.row-span-11 { grid-row: span 11; }
.row-span-12 { grid-row: span 12; }

.row-start-1  { grid-row-start: 1; }
.row-start-2  { grid-row-start: 2; }
.row-start-3  { grid-row-start: 3; }
.row-start-4  { grid-row-start: 4; }
.row-start-5  { grid-row-start: 5; }
.row-start-6  { grid-row-start: 6; }
.row-start-7  { grid-row-start: 7; }
.row-start-8  { grid-row-start: 8; }
.row-start-9  { grid-row-start: 9; }
.row-start-10 { grid-row-start: 10; }
.row-start-11 { grid-row-start: 11; }
.row-start-12 { grid-row-start: 12; }

/* ==========================================================================
   11) Legacy float compatibility (for classless themes that still float)
   - Safe to delete if you don’t need float containment.
   ========================================================================== */

.clearfix::before,
.clearfix::after { content: ""; display: table; }
.clearfix::after { clear: both; }

/* Tiny alias */
.cf::before,
.cf::after { content: ""; display: table; }
.cf::after { clear: both; }
