/*!
 * Lattice.css — lightweight layout & positioning utilities (CORE)
 * Version: 1.0.0
 * URL: https://github.com/rlnorthcutt/lattice
 * Copyright (c) 2025 Ron Northcutt
 * License: MIT (https://opensource.org/licenses/MIT)
 */

 /** Scope (CORE):
 *    - Page layout: 12-column master grid with fluid outer gutters.
 *    - Component layout: internal .grid with fluid columns (auto-fit/minmax).
 *    - Fixed column counts for .grid (1,2,3,4,6,12) + sm/md/lg variants.
 *    - Simple page placements: .l-place-full (full-bleed) / .l-place-content (centered).
 *    - Width helpers (.w-100, .max-w-100), auto-centering (.m-auto, .mx-auto).
 *    - Minimal display aliases and visibility helpers
 *    - Hyphen breakpoint naming: sm- / md- / lg-.
 * For fuller layouts (spans, row controls, a11y helpers, flex alignment, etc.),
 * add lattice.extra.css.
 */

/* ==========================================================================
   0) Root variables
   - Tweak these to change site rhythm and grid behavior.
   ========================================================================== */
:root{
  /* main container width (affects full-bleed margins) */
  --container-width:1024px;

  /* internal grid default min column size (for fluid .grid) */
  --auto-col-min:15rem;

  /* master grid: total content columns = 1 + --column-count = 12 */
  --column-count:11;

  /* prevent negative bleed on narrow viewports */
  --fluid-area:max(0px, calc(50vw - var(--container-width)/2));

  /* rhythm & tracks (spacing + grid track size) */
  --m:1.5rem;         /* base spacing unit (used by themes, not core utils) */
  --g:1rem;           /* column gap (x)  */
  --gap-y:1rem;       /* row gap (y)     */
  --c:1fr;            /* default track size for content columns */
}

/* ==========================================================================
   1) Master grid (page-level)
   - Use on outer wrappers that span the viewport.
   - Place children with .l-place-* or custom grid-column as needed.
   ========================================================================== */
/* Required parent for .l-place-* helpers and custom grid-column */
.grid-container{
  display:grid;
  grid-template-columns:
    [fa] var(--fluid-area)
    [m] max(var(--m), env(safe-area-inset-left))
    [c] var(--c) repeat(var(--column-count), [g] var(--g) [c] var(--c))
    [m] max(var(--m), env(safe-area-inset-right))
    [fa] var(--fluid-area);
}
/* common placements (apply to direct children of .grid-container) */
.l-full-width{grid-column:fa 1 / fa 2;}      /* full-bleed across viewport */
.l-place-content{grid-column:m 1 / m 2;}     /* centered within margins    */

/* ==========================================================================
   2) Internal grids (component-level)
   - .grid is a fluid card/list layout by default.
   - To force exact columns, add .grid.col-N or a responsive variant.
   - Tip: don’t stack display utilities on .grid; it already sets display:grid.
   ========================================================================== */
.grid{
  display:grid;
  row-gap:var(--gap-y);
  column-gap:var(--g);
  grid-template-columns:repeat(auto-fit, minmax(var(--auto-col-min), 1fr));
}
/* Inherit parent columns (modern browsers). Safe to omit if not needed. */
.subgrid{display:grid; grid-template-columns:subgrid;}

/* force exact equal columns on .grid */
.grid.col-1{grid-template-columns:repeat(1,1fr);}
.grid.col-2{grid-template-columns:repeat(2,1fr);}
.grid.col-3{grid-template-columns:repeat(3,1fr);}
.grid.col-4{grid-template-columns:repeat(4,1fr);}
.grid.col-6{grid-template-columns:repeat(6,1fr);}
.grid.col-12{grid-template-columns:repeat(12,1fr);} /* heavy; prefer at lg */

/* responsive column counts (apply to the .grid element) */
/* sm = 576px, md = 768px, lg = 1024px */
@media (min-width:576px){
  .sm-col-1{grid-template-columns:repeat(1,1fr);}
  .sm-col-2{grid-template-columns:repeat(2,1fr);}
  .sm-col-3{grid-template-columns:repeat(3,1fr);}
  .sm-col-4{grid-template-columns:repeat(4,1fr);}
  .sm-col-6{grid-template-columns:repeat(6,1fr);}
  .sm-col-12{grid-template-columns:repeat(12,1fr);}
}
@media (min-width:768px){
  .md-col-1{grid-template-columns:repeat(1,1fr);}
  .md-col-2{grid-template-columns:repeat(2,1fr);}
  .md-col-3{grid-template-columns:repeat(3,1fr);}
  .md-col-4{grid-template-columns:repeat(4,1fr);}
  .md-col-6{grid-template-columns:repeat(6,1fr);}
  .md-col-12{grid-template-columns:repeat(12,1fr);}
}
@media (min-width:1024px){
  .lg-col-1{grid-template-columns:repeat(1,1fr);}
  .lg-col-2{grid-template-columns:repeat(2,1fr);}
  .lg-col-3{grid-template-columns:repeat(3,1fr);}
  .lg-col-4{grid-template-columns:repeat(4,1fr);}
  .lg-col-6{grid-template-columns:repeat(6,1fr);}
  .lg-col-12{grid-template-columns:repeat(12,1fr);}
}

/* ==========================================================================
   3) Positioning utilities
   - Quick centering helpers for common layouts.
   - For margin/padding scales, see lattice.full.css.
   ========================================================================== */
/* Auto-margins for centering (horizontal or both axes) */
.m-auto{margin:auto !important;}
.mx-auto{margin-left:auto !important;margin-right:auto !important;}

/* Optional display aliases (convenience). Avoid adding these to .grid. */
.inline{display:inline !important;}
.block{display:block !important;} .inline-block{display:inline-block !important;}
.flex{display:flex !important;} .inline-flex{display:inline-flex !important;}
.inline-grid{display:inline-grid !important;}

/* ==========================================================================
   4) Common utility classes
   - Visibility helpers only; all other utility scales live in lattice.full.css.
   ========================================================================== */
/* Normalize attribute/class */
.hidden,[hidden]{display:none !important;}
 /* Keep layout, hide visually */
.invisible{visibility:hidden !important;}
/* Width helpers (pure sizing; not placement) */
.w-100{width:100% !important;}
.max-w-100{max-width:100% !important;}
/*!
 * Lattice Extra — extended utilities that build on Lattice.css
 * Version: 1.0.0
 * URL: https://github.com/rlnorthcutt/lattice
 * Copyright (c) 2025 Ron Northcutt
 * License: MIT (https://opensource.org/licenses/MIT)
 *
 * Requires: lattice.css (CORE) — this file uses variables like --m
 */

 /** Scope (EXTRA):
 *  - Spacing & gaps: full scale 0–5 (¼m, ½m, 1m, 1.5m, 2m).
 *  - Display utilities (.d-*) incl. responsive (.sm-d-*, .md-d-*, .lg-d-*).
 *  - Accessibility helpers: .sr-only (+ focusable variant).
 *  - Grid helpers: auto-flow, place-*, master .col-start-* for .grid-container children.
 *  - Flex helpers: essential alignment + advanced (content/self, order, flex-*).
 *  - Internal grid spans (.col-span-*) + row spans/starts/ends for fine control.
 *  - Positioning/sizing shortcuts; overflow/z-index/pointer-events; aspect-ratio.
 *  - Legacy clearfix compatibility.
 *
 * Optimized for sites that want “extras” beyond CORE without going all-in.
 */

/* ==========================================================================
   1) Spacing — 0:0, 1:¼, 2:½, 3:1, 4:1½, 5:2 (uses --m from CORE)
   ========================================================================== */

/* Padding (all) */
.p-0{padding:0 !important;} .p-1{padding:calc(var(--m)/4) !important;}
.p-2{padding:calc(var(--m)/2) !important;} .p-3{padding:var(--m) !important;}
.p-4{padding:calc(var(--m)*1.5) !important;} .p-5{padding:calc(var(--m)*2) !important;}

/* Padding x-axis */
.px-0{padding-left:0 !important;padding-right:0 !important;}
.px-1{padding-left:calc(var(--m)/4) !important;padding-right:calc(var(--m)/4) !important;}
.px-2{padding-left:calc(var(--m)/2) !important;padding-right:calc(var(--m)/2) !important;}
.px-3{padding-left:var(--m) !important;padding-right:var(--m) !important;}
.px-4{padding-left:calc(var(--m)*1.5) !important;padding-right:calc(var(--m)*1.5) !important;}
.px-5{padding-left:calc(var(--m)*2) !important;padding-right:calc(var(--m)*2) !important;}

/* Padding y-axis */
.py-0{padding-top:0 !important;padding-bottom:0 !important;}
.py-1{padding-top:calc(var(--m)/4) !important;padding-bottom:calc(var(--m)/4) !important;}
.py-2{padding-top:calc(var(--m)/2) !important;padding-bottom:calc(var(--m)/2) !important;}
.py-3{padding-top:var(--m) !important;padding-bottom:var(--m) !important;}
.py-4{padding-top:calc(var(--m)*1.5) !important;padding-bottom:calc(var(--m)*1.5) !important;}
.py-5{padding-top:calc(var(--m)*2) !important;padding-bottom:calc(var(--m)*2) !important;}

/* Padding sides */
.pt-0{padding-top:0 !important;} .pt-1{padding-top:calc(var(--m)/4) !important;}
.pt-2{padding-top:calc(var(--m)/2) !important;} .pt-3{padding-top:var(--m) !important;}
.pt-4{padding-top:calc(var(--m)*1.5) !important;} .pt-5{padding-top:calc(var(--m)*2) !important;}
.pr-0{padding-right:0 !important;} .pr-1{padding-right:calc(var(--m)/4) !important;}
.pr-2{padding-right:calc(var(--m)/2) !important;} .pr-3{padding-right:var(--m) !important;}
.pr-4{padding-right:calc(var(--m)*1.5) !important;} .pr-5{padding-right:calc(var(--m)*2) !important;}
.pb-0{padding-bottom:0 !important;} .pb-1{padding-bottom:calc(var(--m)/4) !important;}
.pb-2{padding-bottom:calc(var(--m)/2) !important;} .pb-3{padding-bottom:var(--m) !important;}
.pb-4{padding-bottom:calc(var(--m)*1.5) !important;} .pb-5{padding-bottom:calc(var(--m)*2) !important;}
.pl-0{padding-left:0 !important;} .pl-1{padding-left:calc(var(--m)/4) !important;}
.pl-2{padding-left:calc(var(--m)/2) !important;} .pl-3{padding-left:var(--m) !important;}
.pl-4{padding-left:calc(var(--m)*1.5) !important;} .pl-5{padding-left:calc(var(--m)*2) !important;}

/* Margin (all) */
.m-0{margin:0 !important;} .m-1{margin:calc(var(--m)/4) !important;}
.m-2{margin:calc(var(--m)/2) !important;} .m-3{margin:var(--m) !important;}
.m-4{margin:calc(var(--m)*1.5) !important;} .m-5{margin:calc(var(--m)*2) !important;}

/* Margin x-axis */
.mx-0{margin-left:0 !important;margin-right:0 !important;}
.mx-1{margin-left:calc(var(--m)/4) !important;margin-right:calc(var(--m)/4) !important;}
.mx-2{margin-left:calc(var(--m)/2) !important;margin-right:calc(var(--m)/2) !important;}
.mx-3{margin-left:var(--m) !important;margin-right:var(--m) !important;}
.mx-4{margin-left:calc(var(--m)*1.5) !important;margin-right:calc(var(--m)*1.5) !important;}
.mx-5{margin-left:calc(var(--m)*2) !important;margin-right:calc(var(--m)*2) !important;}

/* Margin y-axis */
.my-0{margin-top:0 !important;margin-bottom:0 !important;}
.my-1{margin-top:calc(var(--m)/4) !important;margin-bottom:calc(var(--m)/4) !important;}
.my-2{margin-top:calc(var(--m)/2) !important;margin-bottom:calc(var(--m)/2) !important;}
.my-3{margin-top:var(--m) !important;margin-bottom:var(--m) !important;}
.my-4{margin-top:calc(var(--m)*1.5) !important;margin-bottom:calc(var(--m)*1.5) !important;}
.my-5{margin-top:calc(var(--m)*2) !important;margin-bottom:calc(var(--m)*2) !important;}

/* Margin sides */
.mt-0{margin-top:0 !important;} .mt-1{margin-top:calc(var(--m)/4) !important;}
.mt-2{margin-top:calc(var(--m)/2) !important;} .mt-3{margin-top:var(--m) !important;}
.mt-4{margin-top:calc(var(--m)*1.5) !important;} .mt-5{margin-top:calc(var(--m)*2) !important;}
.mr-0{margin-right:0 !important;} .mr-1{margin-right:calc(var(--m)/4) !important;}
.mr-2{margin-right:calc(var(--m)/2) !important;} .mr-3{margin-right:var(--m) !important;}
.mr-4{margin-right:calc(var(--m)*1.5) !important;} .mr-5{margin-right:calc(var(--m)*2) !important;}
.mb-0{margin-bottom:0 !important;} .mb-1{margin-bottom:calc(var(--m)/4) !important;}
.mb-2{margin-bottom:calc(var(--m)/2) !important;} .mb-3{margin-bottom:var(--m) !important;}
.mb-4{margin-bottom:calc(var(--m)*1.5) !important;} .mb-5{margin-bottom:calc(var(--m)*2) !important;}
.ml-0{margin-left:0 !important;} .ml-1{margin-left:calc(var(--m)/4) !important;}
.ml-2{margin-left:calc(var(--m)/2) !important;} .ml-3{margin-left:var(--m) !important;}
.ml-4{margin-left:calc(var(--m)*1.5) !important;} .ml-5{margin-left:calc(var(--m)*2) !important;}

/* Gaps (for grid/flex containers) */
.gap-0{gap:0 !important;} .gap-1{gap:calc(var(--m)/4) !important;}
.gap-2{gap:calc(var(--m)/2) !important;} .gap-3{gap:var(--m) !important;}
.gap-4{gap:calc(var(--m)*1.5) !important;} .gap-5{gap:calc(var(--m)*2) !important;}
/* Column gaps */
.gap-x-0{column-gap:0 !important;} .gap-x-1{column-gap:calc(var(--m)/4) !important;}
.gap-x-2{column-gap:calc(var(--m)/2) !important;} .gap-x-3{column-gap:var(--m) !important;}
.gap-x-4{column-gap:calc(var(--m)*1.5) !important;} .gap-x-5{column-gap:calc(var(--m)*2) !important;}
/* Row gaps */
.gap-y-0{row-gap:0 !important;} .gap-y-1{row-gap:calc(var(--m)/4) !important;}
.gap-y-2{row-gap:calc(var(--m)/2) !important;} .gap-y-3{row-gap:var(--m) !important;}
.gap-y-4{row-gap:calc(var(--m)*1.5) !important;} .gap-y-5{row-gap:calc(var(--m)*2) !important;}

/* Aliases */
.gap-none{gap:0 !important;}

/* ==========================================================================
   2) Display & visibility — utilities beyond CORE
   ========================================================================== */
/* Display utilities (duplicated from CORE; harmless to re-define) */
.d-none{display:none !important;} .d-block{display:block !important;}
.d-flex{display:flex !important;} .d-grid{display:grid !important;}

/* Responsive display */
@media (min-width:576px){ .sm-d-none{display:none !important;} .sm-d-block{display:block !important;}
  .sm-d-flex{display:flex !important;} .sm-d-grid{display:grid !important;} }
@media (min-width:768px){ .md-d-none{display:none !important;} .md-d-block{display:block !important;}
  .md-d-flex{display:flex !important;} .md-d-grid{display:grid !important;} }
@media (min-width:1024px){ .lg-d-none{display:none !important;} .lg-d-block{display:block !important;}
  .lg-d-flex{display:flex !important;} .lg-d-grid{display:grid !important;} }

/* Accessibility visibility — visually hide, keep for screen readers */
.sr-only,.visually-hidden{
  position:absolute !important; width:1px !important; height:1px !important;
  padding:0 !important; margin:-1px !important; overflow:hidden !important;
  clip-path:inset(50%) !important; clip:rect(1px,1px,1px,1px) !important;
  white-space:nowrap !important; border:0 !important;
}
/* Reveal when navigated via keyboard (add alongside sr-only/visually-hidden) */
.sr-only-focusable:active,.sr-only-focusable:focus,.sr-only-focusable:focus-within,
.visually-hidden-focusable:active,.visually-hidden-focusable:focus,.visually-hidden-focusable:focus-within{
  position:static !important; width:auto !important; height:auto !important;
  margin:0 !important; overflow:visible !important; clip-path:none !important; clip:auto !important;
  white-space:inherit !important;
}

/* ==========================================================================
   3) Grid helpers (flow/place/start)
   - Flow/Place: apply to any grid container (.grid or custom).
   - .col-start-*: children of .grid-container (master 12-col page grid).
   ========================================================================== */
.flow-row{grid-auto-flow:row !important;} .flow-col{grid-auto-flow:column !important;}
.flow-dense{grid-auto-flow:dense !important;} .flow-row-dense{grid-auto-flow:row dense !important;}
.flow-col-dense{grid-auto-flow:column dense !important;}
.place-items-start{place-items:start !important;} .place-items-center{place-items:center !important;}
.place-items-end{place-items:end !important;} .place-content-start{place-content:start !important;}
.place-content-center{place-content:center !important;} .place-content-end{place-content:end !important;}
.place-self-start{place-self:start !important;} .place-self-center{place-self:center !important;}
.place-self-end{place-self:end !important;}

/* Internal grid column spans (use on items inside .grid) */
.col-span-1{grid-column:span 1 !important;} .col-span-2{grid-column:span 2 !important;}
.col-span-3{grid-column:span 3 !important;} .col-span-4{grid-column:span 4 !important;}
.col-span-5{grid-column:span 5 !important;} .col-span-6{grid-column:span 6 !important;}
.col-span-7{grid-column:span 7 !important;} .col-span-8{grid-column:span 8 !important;}
.col-span-9{grid-column:span 9 !important;} .col-span-10{grid-column:span 10 !important;}
.col-span-11{grid-column:span 11 !important;} .col-span-12{grid-column:span 12 !important;}
.col-span-full{grid-column:1 / -1 !important;} /* full width of internal grid */

/* Master column starts (use on children of .grid-container) */
.col-start-1{grid-column-start:c 1 !important;} .col-start-2{grid-column-start:c 2 !important;}
.col-start-3{grid-column-start:c 3 !important;} .col-start-4{grid-column-start:c 4 !important;}
.col-start-5{grid-column-start:c 5 !important;} .col-start-6{grid-column-start:c 6 !important;}
.col-start-7{grid-column-start:c 7 !important;} .col-start-8{grid-column-start:c 8 !important;}
.col-start-9{grid-column-start:c 9 !important;} .col-start-10{grid-column-start:c 10 !important;}
.col-start-11{grid-column-start:c 11 !important;} .col-start-12{grid-column-start:c 12 !important;}
.col-start-13{grid-column-start:c 13 !important;} /* after last line */

/* Row spans/starts/ends (any grid item) */
.row-span-1{grid-row:span 1;} .row-span-2{grid-row:span 2;}
.row-span-3{grid-row:span 3;} .row-span-4{grid-row:span 4;}
.row-span-5{grid-row:span 5;} .row-span-6{grid-row:span 6;}
.row-span-7{grid-row:span 7;} .row-span-8{grid-row:span 8;}
.row-span-9{grid-row:span 9;} .row-span-10{grid-row:span 10;}
.row-span-11{grid-row:span 11;} .row-span-12{grid-row:span 12;}
.row-start-1{grid-row-start:1;} .row-start-2{grid-row-start:2;}
.row-start-3{grid-row-start:3;} .row-start-4{grid-row-start:4;}
.row-start-5{grid-row-start:5;} .row-start-6{grid-row-start:6;}
.row-start-7{grid-row-start:7;} .row-start-8{grid-row-start:8;}
.row-start-9{grid-row-start:9;} .row-start-10{grid-row-start:10;}
.row-start-11{grid-row-start:11;} .row-start-12{grid-row-start:12;}
.row-end-1{grid-row-end:1;} .row-end-2{grid-row-end:2;}
.row-end-3{grid-row-end:3;} .row-end-4{grid-row-end:4;}
.row-end-5{grid-row-end:5;} .row-end-6{grid-row-end:6;}
.row-end-7{grid-row-end:7;} .row-end-8{grid-row-end:8;}
.row-end-9{grid-row-end:9;} .row-end-10{grid-row-end:10;}
.row-end-11{grid-row-end:11;} .row-end-12{grid-row-end:12;}

/* ==========================================================================
   4) Essential flexbox alignment — common cases
   ========================================================================== */
.flex-row{flex-direction:row !important;} .flex-col{flex-direction:column !important;}
.flex-wrap{flex-wrap:wrap !important;} .flex-nowrap{flex-wrap:nowrap !important;}
.justify-start{justify-content:flex-start !important;} .justify-end{justify-content:flex-end !important;}
.justify-center{justify-content:center !important;} .justify-between{justify-content:space-between !important;}
.items-start{align-items:flex-start !important;} .items-end{align-items:flex-end !important;}
.items-center{align-items:center !important;} .items-stretch{align-items:stretch !important;}
.items-baseline{align-items:baseline !important;}

/* ==========================================================================
   5) Advanced flex helpers — content/self, order, sizing
   ========================================================================== */
.content-start{align-content:flex-start !important;} .content-end{align-content:flex-end !important;}
.content-center{align-content:center !important;} .content-between{align-content:space-between !important;}
.content-around{align-content:space-around !important;} .content-stretch{align-content:stretch !important;}
.self-auto{align-self:auto !important;} .self-start{align-self:flex-start !important;}
.self-end{align-self:flex-end !important;} .self-center{align-self:center !important;}
.self-stretch{align-self:stretch !important;} .self-baseline{align-self:baseline !important;}
.justify-around{justify-content:space-around !important;} .justify-evenly{justify-content:space-evenly !important;}
.flex-1{flex:1 1 0% !important;} .flex-auto{flex:1 1 auto !important;}
.flex-initial{flex:0 1 auto !important;} .flex-none{flex:none !important;}
.order-first{order:-9999 !important;} .order-last{order:9999 !important;}
.order-0{order:0 !important;} .order-1{order:1 !important;} .order-2{order:2 !important;}
.order-3{order:3 !important;} .order-4{order:4 !important;} .order-5{order:5 !important;}
.order-6{order:6 !important;} .order-7{order:7 !important;} .order-8{order:8 !important;}
.order-9{order:9 !important;} .order-10{order:10 !important;} .order-11{order:11 !important;}
.order-12{order:12 !important;}

/* ==========================================================================
   6) Positioning & sizing shortcuts — common layout tricks
   ========================================================================== */
.relative{position:relative !important;} .absolute{position:absolute !important;}
.fixed{position:fixed !important;} .sticky{position:sticky !important;}
.inset-0{inset:0 !important;} .inset-x-0{left:0 !important; right:0 !important;}
.inset-y-0{top:0 !important; bottom:0 !important;} .top-0{top:0 !important;}
.right-0{right:0 !important;} .bottom-0{bottom:0 !important;} .left-0{left:0 !important;}
.w-screen{width:100vw !important;} .h-screen{height:100vh !important;}
.w-auto{width:auto !important;} .h-auto{height:auto !important;} .h-full{height:100% !important;}

/* ==========================================================================
   7) Overflow, z-index, pointer events
   ========================================================================== */
.overflow-auto{overflow:auto !important;} .overflow-hidden{overflow:hidden !important;}
.overflow-visible{overflow:visible !important;} .overflow-scroll{overflow:scroll !important;}
.overflow-x-auto{overflow-x:auto !important;} .overflow-y-auto{overflow-y:auto !important;}
.z-0{z-index:0 !important;} .z-10{z-index:10 !important;} .z-20{z-index:20 !important;}
.z-30{z-index:30 !important;} .z-40{z-index:40 !important;} .z-50{z-index:50 !important;}
.pe-none{pointer-events:none !important;} .pe-auto{pointer-events:auto !important;}

/* ==========================================================================
   8) Aspect ratio — simple content boxes
   ========================================================================== */
.aspect-square{aspect-ratio:1/1 !important;} .aspect-video{aspect-ratio:16/9 !important;}

/* ==========================================================================
   9) Legacy float compatibility — safe if themes still use floats
   ========================================================================== */
.clearfix::before,.clearfix::after{content:""; display:table;} .clearfix::after{clear:both;}
.cf::before,.cf::after{content:""; display:table;} .cf::after{clear:both;}
